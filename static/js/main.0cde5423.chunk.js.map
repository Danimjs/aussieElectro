{"version":3,"sources":["facilities.csv","StoryPanel.js","MapFunctions.js","index.js"],"names":["module","exports","StoryPanel","state","visible","threshold","id","props","data","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","setState","this","divElement","clientHeight","onChange","title","className","ref","content","Component","MapFunctions","container","map","mapboxgl","accessToken","Map","style","zoom","center","geojsondata","on","console","log","addLayer","type","source","paint","property","base","stops","value","filtertype","isStyleLoaded","filterType","setFilter","year","filterStartYear","filterEndYear","ScrollyTeller","years","sorteddata","activeId","panelHeight","panelChanged","m_mapFunctions","componentDidMount","window","innerHeight","data2","mapContainer","alldata","allPanels","setFilterStartEnd","name","status","i","key","height","createPanelContent","el","PanelContent","region","capacity","latitude","longitude","NavMenuItem","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cde5423.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facilities.b841217a.csv\";","import React, { Component } from 'react';\r\nimport Observer from '@researchgate/react-intersection-observer';\r\n\r\n\r\nexport default class StoryPanel extends Component {\r\n    //a storypanel is visible whenit enters the viewport until another enters.\r\n  state = {\r\n    visible: true ,\r\n    threshold: 1,\r\n    id: this.props.id,\r\n    data: []\r\n  };\r\n\r\n    headerHandleChange = event => {\r\n \r\n        if(event.isIntersecting && this.props.id!==this.props.activeID ) {  //this element scrolled into view\r\n            this.props.app.setActiveID(this.props.id)\r\n        }\r\n\r\n    this.setState({\r\n      visible:  this.props.id===this.props.activeID, \r\n    \r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount(){\r\n    \r\n         var n = 400\r\n        if(this.divElement.clientHeight  > n) {\r\n            \r\n          //  console.log(\"Thres: \" + n/this.divElement.clientHeight)\r\n            this.setState({\r\n                threshold: [n/this.divElement.clientHeight,1]\r\n            })\r\n        }\r\n       \r\n           \r\n       // https://biocache-ws.ala.org.au/ws/occurrences/search?q={q}&fq={fq}\r\n     \r\n  }\r\n\r\n  render(){\r\n    return (  \r\n        <Observer\r\n        onChange={this.headerHandleChange}\r\n        threshold={this.state.threshold}\r\n        >\r\n        <section id={this.props.title} className={`storyPanelSection ${ this.state.visible && this.state.id===this.props.activeID ? 'activePanel':'inactivePanel'}`}\r\n            ref={ (divElement) => { this.divElement = divElement } }   >\r\n          \r\n              <h1 className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n               <div className=\"panelcontent\"> {this.props.content} </div>\r\n           \r\n        </section>\r\n        </Observer>\r\n        )\r\n}\r\n}\r\n\r\n","import mapboxgl from 'mapbox-gl'\r\nimport geojson from 'geojson'\r\nexport default class MapFunctions {\r\n\r\n    // set to 2017 initially despite play preview or you get a bug when using the type dropdown\r\n    map = null\r\n    constructor(data, container) {\r\n        mapboxgl.accessToken = \"pk.eyJ1Ijoibm9yYWhhbWEiLCJhIjoiY2ptaGFsZDR5MThrczN1dDhtajc1cTFmMSJ9.VEUImGmfsM77LfjErYxDdQ\"\r\n        this.map = new mapboxgl.Map({\r\n            container: container,\r\n            style: \"mapbox://styles/mapbox/streets-v9\",\r\n            zoom: [5],\r\n            center: [3.436,55.3781]\r\n        })\r\n        // const filterType = ['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n        var geojsondata = data;//geojson.parse(data, {Point: ['latitude','longitude']})\r\n        // console.log(geojsondata)\r\n        this.map.on('load', () => {\r\n            console.log(\"on load...\")\r\n            var filterStartYear = ['<=', ['number', ['get', 'yearStart']], 2008];\r\n            var filterEndYear = ['>=', ['number', ['get', 'yearEnd']], 2008];\r\n            var filterType = ['!=', ['string', ['get','type']], 'placeholder'];\r\n            this.map.addLayer({\r\n                id: 'powerplants',\r\n                type: 'circle',\r\n                source: {\r\n                    type: 'geojson',\r\n                    data: geojsondata\r\n                },\r\n                paint: {\r\n                    'circle-radius': {\r\n                        property: 'capacity',\r\n                        type: 'exponential',\r\n                        base: 0.8,\r\n                        stops: [\r\n                            [{ zoom: 2, value: 1 }, 0.2],\r\n                            [{ zoom: 2, value: 2500 }, 5],\r\n                            [{ zoom: 4.5, value: 1 }, 2],\r\n                            [{ zoom: 4.5, value: 2500 }, 21],\r\n                            [{ zoom: 8, value: 1 }, 4],\r\n                            [{ zoom: 8, value: 2500 }, 32],\r\n                            [{ zoom: 12, value: 1 }, 6],\r\n                            [{ zoom: 12, value: 2500 }, 37],\r\n                            [{ zoom: 15, value: 1 }, 8],\r\n                            [{ zoom: 15, value: 2500 }, 42]\r\n                        ]\r\n                    },\r\n                    'circle-color': [\r\n                        'match',\r\n                        ['get', 'type'],\r\n                        \"Coal\", \"#ced1cc\",\r\n                        \"Storage\", \"#4e80e5\",\r\n                        \"Solar\", \"#ffc83e\",\r\n                        \"Nuclear\", \"#dd54b6\",\r\n                        \"Oil\", \"#a45edb\",\r\n                        \"Hydro\", \"#43cfef\",\r\n                        \"Wave & Tidal\", \"#43cfef\",\r\n                        \"Wind\", \"#00a98e\",\r\n                        \"Biomass\", \"#A7B734\",\r\n                        \"Waste\", \"#ea545c\",\r\n                        \"Gas\", \"#cc9b7a\",\r\n            /* other */ '#ccc'\r\n                    ],\r\n                    'circle-opacity': 0.77\r\n                },\r\n                'filter': ['all', filterStartYear, filterEndYear, filterType]\r\n            });\r\n        })\r\n    }\r\n\r\n    setFilterType(filtertype) {\r\n        if (this.map.isStyleLoaded()) {\r\n            const filterType = [\"all\", [\"==\", [\"get\", \"type\"], filtertype]]\r\n            this.map.setFilter('powerplants', ['all', filterType])\r\n        }\r\n    }\r\n\r\n    setFilterYearStart(year) {\r\n        console.log(year)\r\n        if (this.map.isStyleLoaded()) {\r\n            var filterStartYear = ['<=', ['number', ['get', 'yearStart']], year];\r\n            this.map.setFilter('powerplants', ['all', filterStartYear])\r\n        }\r\n    }\r\n\r\n    setFilterYearEnd(year) {\r\n        if (this.map.isStyleLoaded()) {\r\n            var filterEndYear = ['>=', ['number', ['get', 'yearEnd']], year];\r\n            this.map.setFilter('powerplants', ['all', filterEndYear])\r\n        }\r\n    }\r\n\r\n    setFilterStartEnd(year){\r\n        if (this.map.isStyleLoaded()) {\r\n            var filterEndYear = ['>=', ['number', ['get', 'yearEnd']], year];\r\n            var filterStartYear = ['<=', ['number', ['get', 'yearStart']], year];\r\n            this.map.setFilter('powerplants', ['all', filterEndYear,filterStartYear])\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\nimport * as d3 from 'd3'\nimport data from './facilities.csv';\nimport data2 from './ukdata/power_stations.json'\nimport MapFunctions from './MapFunctions';\nimport { json } from 'd3';\n\n\nclass ScrollyTeller extends Component {\n\n    //  m_mapfilter = null;\n    state = {\n        years: [2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020],\n        sorteddata: [],\n        activeId: 0,\n        panelHeight:700\n    }\n    panelChanged = false\n    m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n    componentDidMount = function () {\n        //adjust height\n        this.setState({panelHeight: window.innerHeight-130})\n        \n        this.m_mapFunctions = new MapFunctions(data2,this.mapContainer)\n        this.setState({alldata:data2})\n        \n     /*   d3.json(data2).then((data2) => {\n            this.setState({\n                alldata:data2\n            })\n            console.log(data2)\n        })\n       */ \n        /*d3.csv(data).then((data) => {\n            this.setState({\n                alldata: data\n            })\n            //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n            var i\n            var item\n            var currTech = \"Fitzlibutzli\"\n            console.log(data)\n            for (i = 0; i < data.length; i++) {\n                item = data[i]\n                if (item.technology !== currTech) {\n                    this.allPanels.push({ content: [], title: item.technology })\n                    this.allPanels[this.allPanels.length - 1].content.push(item)\n                    currTech = item.technology\n                } else {\n                    this.allPanels[this.allPanels.length - 1].content.push(item)\n                }\n\n            }\n            console.log(this.allPanels);\n            this.m_mapFunctions = new MapFunctions(data,this.mapContainer)\n            this.setState({\n                sorteddata: this.allPanels\n            })\n\n        })   */\n    }\n    allPanels = []\n    setActiveID = (id) => {\n        this.setState({\n            activeId: id\n        })\n        //this.m_mapFunctions.setFilterYearStart(this.state.years[id])\n        this.m_mapFunctions.setFilterStartEnd(this.state.years[id])\n\n        //in each year i want to display plants that HAVE STARTED but NOT YET ENDED\n    }\n\n    componentDidUpdate() {\n        // console.log(this.state.alldata)\n\n    }\n\n    createPanelContent(year) {\n     /*   var contentItems = this.state.sorteddata[parentIndex].content\n        var res = []\n        for (var i = 0; i < this.state.years.length; i++) {\n            var info = contentItems[i]\n            res.push(<PanelContent\n                key={i}\n                name={info.facility}\n                status={info.status}\n                region={info.region}\n                capacity={info.generatorcap}\n                latitude={info.latitude}\n                longitude={info.longitude}\n            />)\n        }\n        return res;\n        */\n       //read the text from somewhere based on the given year\n       return <PanelContent name={year} status={\"this will be proper content at some point. this will be proper content at some point. this will be proper content at some point .this will be proper content at some pointthis will be proper content at some pointthis will be proper content at some pointthis will be proper content at some pointthis will be proper content at some pointthis will be proper content at some pointthis will be proper content at some point\"}></PanelContent>\n\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"navbar\">\n                        {this.state.years.map(\n                            (year,i) =>\n                            <NavMenuItem\n                                key={i}\n                                name={year}\n                            />\n                        )}\n                    </div>\n                <div className=\"MainContainer\">                  \n                    <div className=\"Panels\" style={{height: this.state.panelHeight}}>\n                        <div id=\"text-mask-wrapper\" className=\"sticky\">\n                            <div id=\"text-mask\"></div>\n                        </div>\n                        {this.state.years.map(\n                            (year, i) =>\n                                //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={year}\n                                    content={this.createPanelContent(year)}\n                                />\n                        )}\n                    </div>\n                    <div style={{height: this.state.panelHeight}} ref={el => this.mapContainer = el} className=\"mapContainer\" id=\"map\"/>\n                </div>\n              \n            </div>\n        );\n    }\n}\n\n//\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\nconst PanelContent = ({ name, status, region, capacity, latitude, longitude }) => (\n    <div className=\"panelContentFragment\">\n        <h3>{name}</h3>\n        <p> Status: {status} </p>     \n    </div>\n);\n\nconst NavMenuItem = ({name}) => (\n   \n    <a href={\"#\"+name} > {name} </a>\n)\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}