{"version":3,"sources":["MapFunctions.js","StoryPanel.js","index.js"],"names":["MapFunctions","m_filterStartYear","m_filterEndYear","m_filterType","map","instance","console","log","this","data","container","mapboxgl","accessToken","Map","style","zoom","center","geojsondata","on","addLayer","id","type","source","paint","property","base","stops","value","filtertype","isStyleLoaded","updateFilters","year","arr","setFilter","StoryPanel","state","visible","props","anchorname","paragraphs","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","setState","res","i","content","length","push","children","actionFilter","className","onChange","threshold","title","paragraph","key","text","filter","Component","StoryParagraph","highlighted","m_mapFunctions","m_filterArray","topOffset","paragraphChange","handleScroll","bind","window","removeEventListener","ReactDOM","findDOMNode","getBoundingClientRect","top","bottomOffset","bottom","setFilterTypeString","showAllTypes","addEventListener","ReactHtmlParser","ScrollyTeller","sections","activeId","panelHeight","panelChanged","componentDidMount","init","data2","mapContainer","alldata","sectiondata","renderparagraphs","createPanelContent","allPanels","setFilterStartEnd","result","features","j","feature","replace","url","actions","action","highlight","k","keywords","cap","lower","c","toUpperCase","section","name","ref","el","PanelContent","NavMenuItem","selector","alignToTop","render","document","getElementById"],"mappings":"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","file":"static/js/main.100b2c56.chunk.js","sourcesContent":["import mapboxgl from 'mapbox-gl'\r\n//import geojson from 'geojson'\r\nexport default  class MapFunctions {\r\n\r\n    // set to 2017 initially despite play preview or you get a bug when using the type dropdown\r\n    m_filterStartYear = \"\"\r\n    m_filterEndYear =\"\"\r\n    m_filterType = \"\"\r\n    map = null\r\n\r\n    instance\r\n    constructor() {\r\n\r\n        if(!!MapFunctions.instance){\r\n            console.log(\"returning existing instance\")\r\n            return MapFunctions.instance\r\n        }\r\n\r\n        MapFunctions.instance = this\r\n        console.log(\"returning new instance\")\r\n        return this\r\n    }\r\n\r\n    init(data, container){\r\n        mapboxgl.accessToken = \"pk.eyJ1Ijoibm9yYWhhbWEiLCJhIjoiY2ptaGFsZDR5MThrczN1dDhtajc1cTFmMSJ9.VEUImGmfsM77LfjErYxDdQ\"\r\n        this.map = new mapboxgl.Map({\r\n            container: container,\r\n            style: \"mapbox://styles/mapbox/streets-v9\",\r\n            zoom: [5],\r\n            center: [3.436,55.3781]\r\n        })\r\n        // const filterType = ['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n        var geojsondata = data;//geojson.parse(data, {Point: ['latitude','longitude']})\r\n        // console.log(geojsondata)\r\n        this.map.on('load', () => {\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], 2008];\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], 2008];\r\n            this.m_filterType= ['!=', ['string', ['get','type']], 'placeholder'];\r\n            this.map.addLayer({\r\n                id: 'powerplants',\r\n                type: 'circle',\r\n                source: {\r\n                    type: 'geojson',\r\n                    data: geojsondata\r\n                },\r\n                paint: {\r\n                    'circle-radius': {\r\n                        property: 'capacity',\r\n                        type: 'exponential',\r\n                        base: 0.8,\r\n                        stops: [\r\n                            [{ zoom: 2, value: 1 }, 0.2],\r\n                            [{ zoom: 2, value: 2500 }, 5],\r\n                            [{ zoom: 4.5, value: 1 }, 2],\r\n                            [{ zoom: 4.5, value: 2500 }, 21],\r\n                            [{ zoom: 8, value: 1 }, 4],\r\n                            [{ zoom: 8, value: 2500 }, 32],\r\n                            [{ zoom: 12, value: 1 }, 6],\r\n                            [{ zoom: 12, value: 2500 }, 37],\r\n                            [{ zoom: 15, value: 1 }, 8],\r\n                            [{ zoom: 15, value: 2500 }, 42]\r\n                        ]\r\n                    },\r\n                    'circle-color': [\r\n                        'match',\r\n                        ['get', 'type'],\r\n                        \"Coal\", \"#ced1cc\",\r\n                        \"Storage\", \"#4e80e5\",\r\n                        \"Solar\", \"#ffc83e\",\r\n                        \"Nuclear\", \"#dd54b6\",\r\n                        \"Oil\", \"#a45edb\",\r\n                        \"Hydro\", \"#43cfef\",\r\n                        \"Wave & Tidal\", \"#43cfef\",\r\n                        \"Wind\", \"#00a98e\",\r\n                        \"Biomass\", \"#A7B734\",\r\n                        \"Waste\", \"#ea545c\",\r\n                        \"Gas\", \"#cc9b7a\",\r\n            /* other */ '#ccc'\r\n                    ],\r\n                    'circle-opacity': 0.77\r\n                },\r\n                'filter': ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType]\r\n            });\r\n        })\r\n    }\r\n\r\n    setFilterType(filtertype) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType = [\"all\", [\"==\", [\"get\", \"type\"], filtertype ]]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterYearStart(year) {\r\n        console.log(year)\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterYearEnd(year) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterStartEnd(year){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']],  year]\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterTypeString(arr){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType=arr\r\n            this.updateFilters()\r\n        }\r\n    }\r\n    \r\n    showAllTypes(){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType=['!=', ['string', ['get','type']], 'placeholder'];\r\n            this.updateFilters()\r\n        }\r\n    }\r\n    updateFilters(){\r\n       // map.setFilter('powerplants', ['all', filterOperator, filterType, filterStartYear, filterEndYear, filterSite, filterCapacity]);\r\n        this.map.setFilter('powerplants', ['all', this.m_filterStartYear,this.m_filterEndYear, this.m_filterType])\r\n  \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport MapFunctions from './MapFunctions'\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    anchorname: this.props.anchorname,\r\n    paragraphs: []\r\n  };\r\n  handleWaypointActivated(id){\r\n    console.log(\"hi \" + id)\r\n}\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n  componentDidMount(){\r\n    var res = [];\r\n    for(var i = 0; i < this.props.content.length; i++){\r\n      res.push(\r\n        {\"text\" : this.props.content[i].props.children.props.content, \"filter\":  this.props.content[i].props.children.props.actionFilter}\r\n      )\r\n \r\n    \r\n    this.setState({\r\n      paragraphs: res\r\n    })\r\n  }\r\n}\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\"+this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={this.props.anchorname} className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n        </Observer>\r\n\r\n        <div id={this.props.anchorname + \"_id\"} className=\"panelcontent\"> \r\n          {this.state.paragraphs.map(\r\n              (paragraph, i) =>\r\n              <StoryParagraph\r\n                key={this.state.anchorname+\"_id_p\" +i} \r\n                id={this.state.anchorname+\"_id_p\" +i} \r\n                paragraph={paragraph.text}\r\n                actionFilter={paragraph.filter}\r\n                \r\n                />\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n  visible=false\r\n  highlighted= false\r\n\r\n  m_mapFunctions=null\r\n  m_filterArray =[\"any\",[]]\r\n  state= {\r\n    id: this.props.id,\r\n    topOffset: 0\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n  }\r\n  \r\n \r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n  \r\n  handleScroll(event) {\r\n    if(this.state.visible){\r\n      \r\n        var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n        var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n        \r\n        if((topOffset > 150 && topOffset < 300) || (topOffset < 150 && topOffset > 0 && bottomOffset > 300)){\r\n          //if this paragraph has anactionFilter to it, apply it!\r\n          if(this.props.actionFilter){\r\n            if(this.m_mapFunctions===null)\r\n            this.m_mapFunctions = new MapFunctions()\r\n         \r\n            this.m_mapFunctions.setFilterTypeString(this.m_filterArray)\r\n            \r\n          }\r\n\r\n          this.setState({\r\n           highlighted:true\r\n          })\r\n          \r\n         } else {\r\n           //visible should update...\r\n           this.setState({\r\n            highlighted:false\r\n           })\r\n           //deactivate filter if thereisonw\r\n           if(this.props.actionFilter){\r\n            if(this.m_mapFunctions===null)\r\n            this.m_mapFunctions = new MapFunctions()\r\n         \r\n            this.m_mapFunctions.showAllTypes()\r\n            \r\n          }\r\n         }\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    if(this.props.actionFilter){\r\n      console.log(\"I got an actionFilter \" + this.props.actionFilter)\r\n      this.m_filterArray=[\"any\"]\r\n       for(var i =0;i < this.props.actionFilter.length; i++){\r\n        // [ \"any\",[\"==\", [\"get\", \"type\"], \"Coal\"], [\"==\", [\"get\", \"type\"], \"Gas\"], [\"==\", [\"get\", \"type\"], \"Oil\"], [\"==\", [\"get\", \"type\"], \"Nuclear\"]];\r\n        //['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n        this.m_filterArray.push([\"==\",[\"get\",\"type\"],this.props.actionFilter[i]])\r\n      }\r\n    }\r\n  }\r\n\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n   \r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Observer \r\n      onChange={this.paragraphChange}\r\n      threshold={1}\r\n   \r\n      >\r\n      <p \r\n      className={`scrolltext ${this.state.highlighted ? \"active\" :\"\"}` }  \r\n      id={this.props.id}>\r\n        {ReactHtmlParser(this.props.paragraph)}  \r\n   \r\n      </p>\r\n      </Observer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport data2 from './ukdata/power_stations.json'\nimport MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\n\nclass ScrollyTeller extends Component {\n\n    //  m_mapfilter = null;\n    state = {\n        sections:[],\n        //the years should be read from a file with their corresponding html content\n       // sorteddata: [],\n        activeId: 0,\n        panelHeight:700\n    }\n    panelChanged = false\n    m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n    componentDidMount = function () {\n    \n        this.m_mapFunctions = new MapFunctions()\n        this.m_mapFunctions.init(data2,this.mapContainer)\n        this.setState({alldata:data2})\n\n\n        for(var i = 0; i < sectiondata.sections.length; i++){\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year,sectiondata.sections[i].paragraphs)\n        }\n        console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n        \n    }\n    allPanels = []\n    setActiveID = (id) => {\n        this.setState({\n            activeId: id\n        })\n        //this.m_mapFunctions.setFilterYearStart(this.state.years[id])\n        this.m_mapFunctions.setFilterStartEnd(this.state.sections[id].year)\n       \n        //in each year i want to display plants that HAVE STARTED but NOT YET ENDED\n    }\n\n \n    createPanelContent(year,paragraphs) {\n   \n       //read the text from somewhere based on the given year\n       var result = [];\n       var filter =\"\";\n       for(var i = 0; i < paragraphs.length; i++){\n           var key=year+\"_\"+i\n           //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n           if(paragraphs[i].features){\n               for(var j = 0; j < paragraphs[i].features.length;j++){\n                   var feature = paragraphs[i].features[j]\n                   if(feature.type === \"link\"){\n                       paragraphs[i].text = paragraphs[i].text.replace(feature.text,'<a href=\"'+feature.url+'\" target=\"_blank\">'+feature.text+'</a>')\n       //                console.log(paragraphs[i].text)\n                   }\n               }\n           }\n           //if actions aredefined, they are added to the element here.\n           if(paragraphs[i].actions){\n               for( j=0; j<paragraphs[i].actions.length;j++){\n                var action = paragraphs[i].actions[j]\n                if(action.highlight){\n                    filter = []\n                    //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                    for(var k =0; k<action.highlight.keywords.length; k++){\n                        paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k],\"<span class='\"+action.highlight.keywords[k]+\"'>\"+action.highlight.keywords[k]+\"</span>\")\n                        filter.push( this.cap(action.highlight.keywords[k])) //capitalise first letter otherwise the filter breaks \n                    }\n                }\n               }\n           }\n        \n           result.push(\n               <div  key={key}>\n                 \n                  <PanelContent id={key} content={paragraphs[i].text} actionFilter={filter}/>\n                </div>\n            )\n       }\n       return result\n\n    }\n\n    //capitalise the first letter of  string\n    cap(lower){\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"navbar\">\n                        {this.state.sections.map(\n                            (section,i) =>\n                            <NavMenuItem\n                                key={i}\n                                id={i}\n                                name={section.year}\n                                activeId={this.state.activeId}\n                            />\n                        )}\n                     </div>\n                <div className=\"MainContainer\">                  \n                    <div className=\"Panels\" /*style={{height: this.state.panelHeight}}*/>        \n                        \n                        {this.state.sections.map(\n                            (section, i) =>\n                                //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.year}\n                                    anchorname={\"section\"+section.year}\n                                    content={section.renderparagraphs}\n                                />\n                        )}\n                    </div>\n                    <div /*style={{height: this.state.panelHeight}}*/ ref={el => this.mapContainer = el} className=\"mapContainer\" id=\"map\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\n//\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\nconst PanelContent = ({id,content}) => (\n     <p id={id}>{content}</p>  \n)\n\n\n\nconst NavMenuItem = ({id,name,activeId}) => (\n   \n    <ScrollIntoView \n        selector={`#section${name}`} \n        alignToTop={true} > \n        <div className={`navItem ${id===activeId ? \"navItemActive\" :\"\"}`}> {name} </div>\n    </ScrollIntoView>\n)\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}