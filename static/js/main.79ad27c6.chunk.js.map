{"version":3,"sources":["StoryPanel.js","MapFunctions.js","stacked-bar.js","index.js"],"names":["StoryPanel","m_actionFilter","state","visible","id","props","anchorname","paragraphs","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","setState","res","i","this","length","push","content","text","actionFilter","className","onChange","threshold","title","map","paragraph","key","filter","Component","StoryParagraph","m_firedAction","m_statusChanged","m_filterArray","paragraphChange","handleScroll","bind","window","removeEventListener","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","bottomOffset","bottom","highlighted","action","types","addEventListener","ReactHtmlParser","MapFunctions","m_filterStartYear","activeYear","m_filterEndYear","m_filterType","m_initiated","self","grump","m_colors","currentYear","rawtypes","getFuel","type","fuelDetail","roundToOne","capacity","Math","round","mapboxgl","accessToken","Map","container","style","zoom","center","geojsondata","data","on","addLayer","source","paint","property","base","stops","value","tooltip","Marker","tooltipContainer","offset","setLngLat","addTo","e","console","log","features","properties","site","lngLat","getCanvas","cursor","testFunction","show","color","name","lowCarbon","operator","open","fuel","chp","render","React","createElement","PopupContent","unmountComponentAtNode","prevState","updateFilters","active","init","document","o","yearOpen","plantColor","setTooltip","filtertype","isStyleLoaded","setFilter","height","ref","el","mapContainer","Stackedbarchart","width","percentages","reverseStackOrder","dataKey","stackId","fill","layout","align","verticalAlign","iconType","PureComponent","jsfiddleUrl","ScrollyTeller","updateDimensions","innerWidth","innerHeight","panelHeight","percentageCalcs","sections","activeId","panelChanged","updatePercentages","year","arr","yearPerc","obj","percentage","t","UNSAFE_componentWillMount","sectiondata","renderparagraphs","createPanelContent","helperArray","tempArr","j","data2","yearstart","yearStart","yearend","yearEnd","k","key2","num","allPanels","setActiveMulti","setActive","ttype","toggleActive","undefined","vfilter","result","feature","replace","url","actions","highlight","keywords","cap","lower","c","toUpperCase","section","onClickA","NavMenuTypeItem","handleClick","onClick","StackedBar","NavMenuItem","selector","alignToTop","getElementById"],"mappings":"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","file":"static/js/main.79ad27c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    anchorname: this.props.anchorname,\r\n    paragraphs: []\r\n  };\r\n\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"filter\": this.props.paragraphs[i].props.actionFilter }\r\n      )\r\n\r\n     \r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={this.props.anchorname} className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n        </Observer>\r\n\r\n        <div id={this.props.anchorname + \"_id\"} className=\"panelcontent\">\r\n          {this.state.paragraphs.map(\r\n            (paragraph, i) =>\r\n              <StoryParagraph\r\n                key={this.state.anchorname + \"_id_p\" + i}\r\n                id={this.state.anchorname + \"_id_p\" + i}\r\n                paragraph={paragraph.text}\r\n                actionFilter={paragraph.filter}\r\n\r\n              />\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n\r\n  m_firedAction = false\r\n  m_statusChanged= false\r\n  m_filterArray = [\"any\", []]\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n  handleScroll(event) {\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n      var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n      if(!this.m_firedAction){\r\n        if(this.state.highlighted){\r\n          if (this.props.actionFilter) { //if this has any actions supplied\r\n         \r\n            this.props.actionFilter.action( this.props.actionFilter.types,true)\r\n         //   this.m_mapFunctions.setFilterTypeString(this.m_filterArray)\r\n           //TODO HERE this.props.actionFilter.action\r\n          }\r\n          this.m_firedAction = true;\r\n        } else {\r\n          if (this.props.actionFilter) {\r\n          \r\n            this.props.actionFilter.action(null,true)\r\n           // this.m_mapFunctions.showAllTypes()\r\n            this.m_firedAction = true;\r\n          }\r\n        }\r\n      }\r\n      if ((topOffset > 150 && topOffset < 300) || (topOffset < 150 && topOffset > 0 && bottomOffset > 300)) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if(!this.state.highlighted){\r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n          this.m_firedAction = false\r\n        } \r\n         \r\n        \r\n      } else {\r\n \r\n        if(this.state.highlighted){\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    /*if (this.props.actionFilter) {\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      \r\n     \r\n    }*/\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Observer\r\n        onChange={this.paragraphChange}\r\n      >\r\n        <p\r\n          className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n          id={this.props.id}>\r\n          {ReactHtmlParser(this.props.paragraph)}\r\n     \r\n        </p>\r\n      </Observer>\r\n    )\r\n  }\r\n}","import mapboxgl from 'mapbox-gl'\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n//import geojson from 'geojson'\r\nexport default class MapFunctions extends Component {\r\n\r\n    // set to 2017 initially despite play preview or you get a bug when using the type dropdown\r\n    m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], this.props.activeYear]\r\n    m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], this.props.activeYear]\r\n    m_filterType = ['!=', ['string', ['get', 'type']], 'placeholder']\r\n    m_initiated = false\r\n    map = null\r\n\r\n    app = null\r\n    tooltipContainer\r\n    popup\r\n    self = null\r\n    grump = null\r\n    m_colors = {\r\n        \"Coal\": \"#ced1cc\",\r\n        \"Storage\": \"#4e80e5\",\r\n        \"Solar\": \"#ffc83e\",\r\n        \"Nuclear\": \"#dd54b6\",\r\n        \"Oil\": \"#a45edb\",\r\n        \"Hydro\": \"#43cfef\",\r\n        \"Wave & Tidal\": \"#43cfef\",\r\n        \"Wind\": \"#00a98e\",\r\n        \"Biomass\": \"#A7B734\",\r\n        \"Waste\": \"#ea545c\",\r\n        \"Gas\": \"#cc9b7a\",\r\n    }\r\n\r\n    state = {\r\n\r\n        currentYear: this.props.activeYear,\r\n        rawtypes: this.props.types\r\n    }\r\n\r\n\r\n    init() {\r\n        if (!this.m_initiated) {\r\n            mapboxgl.accessToken = \"pk.eyJ1Ijoibm9yYWhhbWEiLCJhIjoiY2ptaGFsZDR5MThrczN1dDhtajc1cTFmMSJ9.VEUImGmfsM77LfjErYxDdQ\"\r\n            this.map = new mapboxgl.Map({\r\n                container: \"map\",\r\n                style: \"mapbox://styles/mapbox/streets-v9\",\r\n                zoom: [5.5],\r\n                center: [0, 55.3781]\r\n            })\r\n\r\n            // const filterType = ['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n            var geojsondata = this.props.data;//geojson.parse(data, {Point: ['latitude','longitude']})\r\n            // console.log(geojsondata)\r\n            this.map.on('load', () => {\r\n                //  this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], 2000];\r\n                //  this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], 2000];\r\n                //  this.m_filterType = ['!=', ['string', ['get', 'type']], 'placeholder'];\r\n                this.map.addLayer({\r\n                    id: 'powerplants',\r\n                    type: 'circle',\r\n                    source: {\r\n                        type: 'geojson',\r\n                        data: geojsondata\r\n                    },\r\n                    paint: {\r\n                        'circle-radius': {\r\n                            property: 'capacity',\r\n                            type: 'exponential',\r\n                            base: 0.8,\r\n                            stops: [\r\n                                [{ zoom: 2, value: 1 }, 0.2],\r\n                                [{ zoom: 2, value: 2500 }, 5],\r\n                                [{ zoom: 4.5, value: 1 }, 2],\r\n                                [{ zoom: 4.5, value: 2500 }, 21],\r\n                                [{ zoom: 8, value: 1 }, 4],\r\n                                [{ zoom: 8, value: 2500 }, 32],\r\n                                [{ zoom: 12, value: 1 }, 6],\r\n                                [{ zoom: 12, value: 2500 }, 37],\r\n                                [{ zoom: 15, value: 1 }, 8],\r\n                                [{ zoom: 15, value: 2500 }, 42]\r\n                            ]\r\n                           \r\n                        },\r\n                        'circle-color': [\r\n                            'match',\r\n                            ['get', 'type'],\r\n                            \"Coal\", \"#ced1cc\",\r\n                            \"Storage\", \"#4e80e5\",\r\n                            \"Solar\", \"#ffc83e\",\r\n                            \"Nuclear\", \"#dd54b6\",\r\n                            \"Oil\", \"#a45edb\",\r\n                            \"Hydro\", \"#43cfef\",\r\n                            \"Wave & Tidal\", \"#43cfef\",\r\n                            \"Wind\", \"#00a98e\",\r\n                            \"Biomass\", \"#A7B734\",\r\n                            \"Waste\", \"#ea545c\",\r\n                            \"Gas\", \"#cc9b7a\",\r\n            /* other */ '#ccc'\r\n                        ],\r\n                        'circle-opacity': 0.77\r\n                    },\r\n                    'filter': ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType]\r\n                });\r\n            })\r\n            var self = this\r\n            \r\n            const tooltip = new mapboxgl.Marker(this.tooltipContainer, {\r\n                offset: [-120, 0]\r\n              }).setLngLat([0,0]).addTo(this.map);\r\n\r\n            this.map.on('mouseenter', 'powerplants', function (e) {\r\n                // Change the cursor style as a UI indicator.\r\n                console.log(\"enter: \" + e.features[0].properties.site)\r\n                tooltip.setLngLat(e.lngLat);\r\n                self.grump = e.features[0]\r\n                self.map.getCanvas().style.cursor = 'pointer';\r\n                self.testFunction(true)\r\n\r\n            })\r\n\r\n            this.map.on('mousemove', 'powerplants', function (e) {\r\n                tooltip.setLngLat(e.lngLat);\r\n                self.grump = e.features[0]\r\n                self.map.getCanvas().style.cursor = 'pointer';\r\n                self.testFunction(true)\r\n\r\n            })\r\n\r\n            this.map.on('mouseleave', 'powerplants', function (e) {\r\n         \r\n                self.map.getCanvas().style.cursor = '';\r\n                self.testFunction(false)\r\n            });\r\n            // Change the cursor style as a UI indicator.\r\n            this.map.getCanvas().style.cursor = 'pointer';\r\n            this.m_initiated = true;\r\n        }\r\n\r\n    }\r\n\r\n    setTooltip(show, color, name, capacity, lowCarbon, operator, open, fuel, chp) {\r\n        if (show) {\r\n\r\n            ReactDOM.render(\r\n                React.createElement(\r\n                    PopupContent, {\r\n                    color, name, capacity, lowCarbon, operator, open, fuel, chp\r\n                }\r\n                ),\r\n                this.tooltipContainer\r\n            )\r\n        } else {\r\n\r\n            ReactDOM.unmountComponentAtNode(this.tooltipContainer)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n\r\n        //   console.log(this.props.filter)\r\n        if (this.props.activeYear !== this.state.currentYear) {\r\n            console.log(\"new year: \" + this.props.activeYear)\r\n            this.setState({\r\n                currentYear: this.props.activeYear,\r\n                m_filterStartYear: ['<=', ['number', ['get', 'yearStart']], this.props.activeYear],\r\n                m_filterEndYear: ['>=', ['number', ['get', 'yearEnd']], this.props.activeYear]\r\n            })\r\n            this.updateFilters()\r\n        }\r\n        if (this.props.types !== this.state.rawtypes) {\r\n            this.m_filterType = [\"any\"]\r\n            //create the filter syntax fromthe actionFilter provided\r\n            for (var i = 0; i < this.props.types.length; i++) {\r\n                if (this.props.types[i].active)\r\n                    this.m_filterType.push([\"==\", [\"get\", \"type\"], this.props.types[i].type])\r\n            }\r\n\r\n            this.setState({\r\n\r\n                rawtypes: this.props.types\r\n            })\r\n            this.updateFilters()\r\n        }\r\n        this.init()\r\n    }\r\n    componentDidMount() {\r\n        this.tooltipContainer = document.createElement('div');\r\n        this.init()\r\n    }\r\n    testFunction(show) {\r\n\r\n        var o = this.grump\r\n        var name = o.properties.site;\r\n        var capacity = o.properties.capacity;\r\n        var type = o.properties.type;\r\n        var fuelDetail = o.properties.fuelDetail;\r\n        var lowCarbon = o.properties.lowCarbon;\r\n        var operator = o.properties.operator;\r\n        var chp = o.properties.chp;\r\n        var open = o.properties.yearOpen;\r\n        var plantColor = this.m_colors[o.properties.type];\r\n\r\n        this.setTooltip(show,plantColor, name,capacity,lowCarbon,operator,open,this.getFuel(type,fuelDetail),chp)\r\n        // Ensure that if the map is zoomed out such that multiple\r\n        // copies of the feature are visible, the popup appears over the copy being pointed to.\r\n        //   while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n        //      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n        // }\r\n\r\n        // Populate the popup and set its coordinates\r\n        // based on the feature found.\r\n      //  this.popup.setLngLat(coordinates)\r\n      //      .setHTML(<PopupContent color={plantColor} name={name} capacity={this.roundToOne(capacity)} lowCarbon={lowCarbon} operator={operator} open={open} fuel={this.getFuel(type, fuelDetail)} chp={chp} />)\r\n      //      .addTo(this.map);\r\n    }\r\n\r\n    setFilterType(filtertype) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType = [\"all\", [\"==\", [\"get\", \"type\"], filtertype]]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    updateFilters() {\r\n        if (this.map.isStyleLoaded()) {\r\n            // map.setFilter('powerplants', ['all', filterOperator, filterType, filterStartYear, filterEndYear, filterSite, filterCapacity]);\r\n            this.map.setFilter('powerplants', ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType])\r\n        }\r\n    }\r\n\r\n    getFuel = (type, fuelDetail) => {\r\n        if (fuelDetail === \"-\") {\r\n            return type\r\n        } else if (type === \"Wind\" || type === \"Hydro\") {\r\n            return fuelDetail\r\n        } else {\r\n            return type + \", \" + fuelDetail\r\n        }\r\n    }\r\n\r\n    roundToOne = (capacity) => {\r\n        return +(Math.round(capacity + \"e+1\") + \"e-1\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div style={{ height: this.props.height }} ref={el => this.mapContainer = el} className=\"mapContainer topDistance\" id=\"map\" />\r\n\r\n        )\r\n    }\r\n\r\n}\r\nconst PopupContent = ({ color, name, capacity, lowCarbon, operator, open, fuel, chp }) => (\r\n    <div className={`colour-key popupDiv`}>\r\n        <h3 className=\"popupHeading\" style={{ color: color }}> {name}</h3>\r\n        <div className=\"popupInfo\" style={{ 'backgroundColor': color }} >\r\n            <p className=\"inline\">{fuel}</p>\r\n            <p><span className=\"label-title\">Capacity: </span>{capacity}<span className=\"units\">MW</span></p>\r\n            <p><span className=\"label-title\">Low carbon? </span>{lowCarbon}</p>{chp !== \"-\" ? <p><span className=\"label-title\">Combined heat and power?</span>{chp}</p> : \"\"}\r\n            <p><span className=\"label-title\">Operator: </span> {operator}</p>\r\n            <p><span className=\"label-title\">Year opened: </span> {open} </p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n","// with help from https://bl.ocks.org/reinson/166bae46dd106b45cf2d77c7802768ca\r\n\r\n// zero data converted to 0.001 to avoid messing up the order of the colours if bars are added/removed\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n  BarChart, Bar, Legend\r\n} from 'recharts';\r\n\r\n  \r\n  export default class Stackedbarchart extends PureComponent {\r\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/90v76x08/';\r\n   \r\n\r\n    render() {\r\n      return (\r\n         <div>\r\n        <BarChart\r\n          width={this.props.width+20}\r\n          height={this.props.height}\r\n          data={this.props.percentages}\r\n          reverseStackOrder={true}\r\n        >\r\n         \r\n          <Bar dataKey=\"Coal\" stackId=\"a\" fill=\"#ced1cc\" />\r\n          \r\n         \r\n          <Bar dataKey=\"Gas\" stackId=\"a\" fill=\"#cc9b7a\" />\r\n          <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#43cfef\" />\r\n          <Bar dataKey=\"Oil\" stackId=\"a\" fill=\"#a45edb\" />\r\n          <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#dd54b6\" />\r\n          <Bar dataKey=\"Wind\" stackId=\"a\" fill=\"#00a98e\" />\r\n          <Bar dataKey=\"Solar\" stackId=\"a\" fill=\"#ffc83e\" />\r\n          <Bar dataKey=\"Biomass\" stackId=\"a\" fill=\"#A7B734\" />\r\n            <Legend layout=\"vertical\" align=\"left\" verticalAlign=\"middle\" iconType=\"rect\"/>\r\n        </BarChart>\r\n        \r\n       </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css'\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport data2 from './ukdata/power_stations.json'\nimport MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\nimport Stackedbarchart from './stacked-bar.js'\n\n\nclass ScrollyTeller extends Component {\n\n   \n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight, panelHeight: window.innerHeight-100 });\n\n      };\n    componentDidUpdate(prevState) {\n        if (prevState.types !== this.state.types && prevState.types!==undefined) {\n            console.log(prevState.types)\n            console.log(this.state.types)\n            var vfilter = [\"any\"]\n            for (var i = 0; i < this.state.types.length; i++) {\n                var type = this.state.types[i]\n                if (type.active) {\n                    vfilter.push([\"==\", [\"get\", \"type\"], type.type])\n                }\n            }\n            this.setState({\n                filter: vfilter\n            })\n           // this.m_mapFunctions.setFilterTypeString(filter)\n        }\n\n        if(prevState.activeId !== this.state.activeId && prevState.activeId!==undefined){\n            this.updatePercentages()\n        }\n    }\n    //  m_mapfilter = null;\n    state = {\n        percentageCalcs: {},\n        sections: [],\n        width: 0,\n        height: 0,\n        filter: \"\",\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        panelHeight: 800,\n        types: [{ \"type\": \"Coal\", \"active\": true },\n        { \"type\": \"Gas\", \"active\": true },\n        { \"type\": \"Oil\", \"active\": true },\n        { \"type\": \"Nuclear\", \"active\": true },\n        { \"type\": \"Hydro\", \"active\": true },\n        { \"type\": \"Wind\", \"active\": true },\n        { \"type\": \"Waste\", \"active\": true },\n        { \"type\": \"Solar\", \"active\": true }],\n\n        percentages: [{ \"type\": \"Coal\", \"percentage\": 45 },\n        { \"type\": \"Gas\", \"percentage\": 10  },\n        { \"type\": \"Oil\", \"percentage\": 10  },\n        { \"type\": \"Nuclear\", \"percentage\": 15  },\n        { \"type\": \"Hydro\", \"percentage\": 8  },\n        { \"type\": \"Wind\", \"percentage\": 6  },\n        { \"type\": \"Waste\", \"percentage\": 3  },\n        { \"type\": \"Solar\", \"percentage\": 3  }]\n    }\n    panelChanged = false\n   // m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n\n    updatePercentages = () => {\n  \n        var year = this.state.sections[this.state.activeId].year\n       // console.log(year)\n        var arr = []\n        var yearPerc = this.state.percentageCalcs[year]\n     \n        //console.log(yearPerc)\n        for(var key in yearPerc){\n            var obj = {\"type\" : key, \"percentage\" : yearPerc[key], \"name\": key}\n            arr.push(obj)\n        }\n        obj = {}\n        for(var i = 0; i < arr.length;i++){\n            obj[arr[i].type] = arr[i].percentage\n        }\n        var t = []\n        t.push(obj)\n        this.setState({\n            percentages: t\n        })\n        //console.log(t)\n    }\n    UNSAFE_componentWillMount = function () {\n        window.addEventListener('resize', this.updateDimensions);\n        this.updateDimensions()\n        \n    \n        for (var i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year, sectiondata.sections[i].paragraphs)\n       //     console.log(sectiondata.sections[i].renderparagraphs)\n        }\n        //  console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n        console.log(sectiondata.sections)\n        var helperArray = {}\n        var tempArr = {}\n        //fill percentage calculations\n        for(var j =0; j < data2.features.length; j++){\n            var obj = data2.features[j]\n            var yearstart = data2.features[j].properties.yearStart\n            var yearend = data2.features[j].properties.yearEnd\n            for(var k = yearstart; k <=yearend; k++){\n                if(tempArr[k]){\n                    if(tempArr[k][obj.properties.type]){\n                        tempArr[k][obj.properties.type]+=obj.properties.capacity\n                    } else {\n                        tempArr[k][obj.properties.type]=obj.properties.capacity\n                    }\n                    helperArray[k]+= obj.properties.capacity\n                } else {\n                    tempArr[k] = {}\n                    tempArr[k][obj.properties.type]=obj.properties.capacity\n                    helperArray[k] = obj.properties.capacity\n                }\n            }\n        }\n       // console.log(helperArray)\n        //now normalise to 100%\n        for(var key in helperArray){\n            for(var key2 in  tempArr[key]){\n                var num = tempArr[key][key2]\n                num = (num / helperArray[key]) * 100\n                tempArr[key][key2] = num\n            }\n        }\n        this.setState({\n            percentageCalcs: tempArr\n        })\n\n        /* this needs to be done once at the beginning and then when the component updates */\n        var year = sectiondata.sections[0].year\n       // console.log(year)\n        var arr = []\n        var yearPerc = tempArr[year]\n     \n        //console.log(yearPerc)\n        for(var key in yearPerc){\n            var obj = {\"type\" : key, \"percentage\" : yearPerc[key], \"name\": key}\n            arr.push(obj)\n        }\n        obj = {}\n        for(var i = 0; i < arr.length;i++){\n            obj[arr[i].type] = arr[i].percentage\n        }\n        var t = []\n        t.push(obj)\n        this.setState({\n            percentages: t\n        })\n\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n      }\n    allPanels = []\n    setActiveID = (id) => {\n        this.setState({\n            activeId: id\n        })\n        //this.m_mapFunctions.setFilterYearStart(this.state.years[id])\n     //   this.m_mapFunctions.setFilterStartEnd(this.state.sections[id].year)\n\n        this.updatePercentages()\n        //in each year i want to display plants that HAVE STARTED but NOT YET ENDED\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        var result = [];\n        var filter = \"\";\n        var key =\"\"\n        for (var i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (var j = 0; j < paragraphs[i].features.length; j++) {\n                    var feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    }\n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (j = 0; j < paragraphs[i].actions.length; j++) {\n                    var action = paragraphs[i].actions[j]\n                    if (action.highlight) {\n                        filter = {\n                            \"action\":this.setActiveMulti,\n                            \"types\": []\n                        }\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (var k = 0; k < action.highlight.keywords.length; k++) {\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k], \"<span class='\" + action.highlight.keywords[k] + \"'>\" + action.highlight.keywords[k] + \"</span>\")\n                            filter.types.push(this.cap(action.highlight.keywords[k]))\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    }\n                }\n            }\n\n            result.push(  \n                    <div  content={paragraphs[i]} id={key} actionFilter={filter}  />\n            )\n        }\n       // console.log(result)\n        return result\n\n    }\n\n    //gets called from child components or when the user clicked the type nav menu. updates state of that menu accordingly, also when a scrolltrigger (de)activated a type\n    setActiveMulti=(types)=> {\n       \n        var arr = null\n        if(types===null){\n             arr = [{ \"type\": \"Coal\", \"active\": true },\n             { \"type\": \"Gas\", \"active\": true },\n             { \"type\": \"Oil\", \"active\": true },\n             { \"type\": \"Nuclear\", \"active\": true },\n             { \"type\": \"Hydro\", \"active\": true },\n             { \"type\": \"Wind\", \"active\": true },\n             { \"type\": \"Waste\", \"active\": true },\n             { \"type\": \"Solar\", \"active\": true }]\n             \n        } else {\n            arr = [{ \"type\": \"Coal\", \"active\": false },\n             { \"type\": \"Gas\", \"active\": false },\n             { \"type\": \"Oil\", \"active\": false },\n             { \"type\": \"Nuclear\", \"active\": false },\n             { \"type\": \"Hydro\", \"active\": false },\n             { \"type\": \"Wind\", \"active\": false },\n             { \"type\": \"Waste\", \"active\": false },\n             { \"type\": \"Solar\", \"active\": false }]\n             for(var i = 0; i < arr.length; i++){\n                 for(var j = 0; j < types.length; j++){\n                    if(arr[i].type === types[j]){\n                        arr[i].active=true\n                        break;\n                    }\n                 }\n             }\n             \n        }\n        this.setState({\n            types: arr\n        })\n    }\n    \n    setActive=(ttype, active) =>{\n        //  console.log(index)\n        this.setState(state => {\n            const types = state.types.map((type, i) => {\n                if (type === ttype) {\n                    return { \"type\": type.type, \"active\": active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n\n    toggleActive=(ttype)=> {\n         console.log(ttype)\n        this.setState(state => {\n            const types = state.types.map((type) => {\n                if (type.type === ttype) {\n                    return { \"type\": type.type, \"active\": !type.active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"navbar\" id=\"yearNav\">\n                    {this.state.sections.map(\n                        (section, i) =>\n                            <NavMenuItem\n                                key={i}\n                                id={i}\n                                name={section.year}\n                                activeId={this.state.activeId}\n                            />\n                    )}\n                </div>\n                <div className=\"navbar\" id=\"typeNav\">\n                    {this.state.types.map(\n                        (type, i) =>\n                            <NavMenuTypeItem\n                                key={i}\n                                onClickA={this.toggleActive}\n                                type={type.type}\n                                active={type.active}\n                            />\n                    )}\n                </div>\n                <div className=\"MainContainer\">\n                    <StackedBar  percentages={this.state.percentages} height={this.state.panelHeight}/>\n                    <div className=\"Panels topDistance\" style={{height: this.state.panelHeight}}>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n                              \n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.year}\n                                    anchorname={\"section\" + section.year}\n                                    paragraphs={section.renderparagraphs}\n                                />\n                            )}\n                    </div>\n                    <MapFunctions types={this.state.types} data={data2} height={this.state.panelHeight} filter={this.state.filter} activeYear={this.state.sections !== undefined ?  this.state.sections[this.state.activeId].year : \"2004\"} />\n                   \n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass NavMenuTypeItem extends Component {\n    handleClick = () => {\n      this.props.onClickA(this.props.type);\n    }\n  \n    render() {\n      return (\n        <div onClick={this.handleClick} className={`navItem ${this.props.active ? \"navItemActive\" : \"\"}`}> {this.props.type} </div>\n        \n      );\n    }\n}\n\nclass StackedBar extends Component {\n    render () {\n        return(\n            <div className=\"leftSide topDistance\" style={{height: this.props.height}}  id=\"stackedBar\">\n                <Stackedbarchart   percentages={this.props.percentages} width={120} height={this.props.height}> Placeholder for stacked bar</Stackedbarchart>\n            </div>\n    )}\n}\nconst NavMenuItem = ({ id, name, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#section${name}`}\n        alignToTop={true} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"}`}> {name} </div>\n    </ScrollIntoView>\n)\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}