{"version":3,"sources":["MapFunctions.js","StoryPanel.js","index.js"],"names":["MapFunctions","m_filterStartYear","m_filterEndYear","m_filterType","map","app","instance","console","log","this","data","container","mapboxgl","accessToken","Map","style","zoom","center","geojsondata","on","addLayer","id","type","source","paint","property","base","stops","value","filtertype","isStyleLoaded","updateFilters","year","arr","setFilter","StoryPanel","m_actionFilter","state","visible","props","anchorname","paragraphs","headerHandleChange","event","isIntersecting","activeID","setActiveID","setState","res","i","length","push","content","text","actionFilter","className","onChange","threshold","title","paragraph","key","filter","Component","StoryParagraph","m_mapFunctions","m_firedAction","m_statusChanged","m_filterArray","paragraphChange","handleScroll","bind","window","removeEventListener","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","bottomOffset","bottom","highlighted","action","types","addEventListener","ReactHtmlParser","ScrollyTeller","sections","activeId","panelHeight","panelChanged","componentDidMount","init","data2","mapContainer","alldata","sectiondata","renderparagraphs","createPanelContent","allPanels","setFilterStartEnd","setActiveMulti","active","j","setActive","ttype","toggleActive","prevState","setFilterTypeString","result","features","feature","replace","url","actions","highlight","k","keywords","cap","lower","c","toUpperCase","section","name","onClickA","ref","el","NavMenuTypeItem","handleClick","onClick","NavMenuItem","selector","alignToTop","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd081815.chunk.js","sourcesContent":["import mapboxgl from 'mapbox-gl'\r\n//import geojson from 'geojson'\r\nexport default  class MapFunctions {\r\n\r\n    // set to 2017 initially despite play preview or you get a bug when using the type dropdown\r\n    m_filterStartYear = \"\"\r\n    m_filterEndYear =\"\"\r\n    m_filterType = \"\"\r\n    map = null\r\n\r\n    app=null\r\n    instance\r\n    constructor() {\r\n\r\n        if(!!MapFunctions.instance){\r\n            console.log(\"returning existing instance\")\r\n            return MapFunctions.instance\r\n        }\r\n\r\n        MapFunctions.instance = this\r\n        console.log(\"returning new instance\")\r\n        return this\r\n    }\r\n\r\n    init(data, container){\r\n        mapboxgl.accessToken = \"pk.eyJ1Ijoibm9yYWhhbWEiLCJhIjoiY2ptaGFsZDR5MThrczN1dDhtajc1cTFmMSJ9.VEUImGmfsM77LfjErYxDdQ\"\r\n        this.map = new mapboxgl.Map({\r\n            container: container,\r\n            style: \"mapbox://styles/mapbox/streets-v9\",\r\n            zoom: [5],\r\n            center: [3.436,55.3781]\r\n        })\r\n        // const filterType = ['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n        var geojsondata = data;//geojson.parse(data, {Point: ['latitude','longitude']})\r\n        // console.log(geojsondata)\r\n        this.map.on('load', () => {\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], 2008];\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], 2008];\r\n            this.m_filterType= ['!=', ['string', ['get','type']], 'placeholder'];\r\n            this.map.addLayer({\r\n                id: 'powerplants',\r\n                type: 'circle',\r\n                source: {\r\n                    type: 'geojson',\r\n                    data: geojsondata\r\n                },\r\n                paint: {\r\n                    'circle-radius': {\r\n                        property: 'capacity',\r\n                        type: 'exponential',\r\n                        base: 0.8,\r\n                        stops: [\r\n                            [{ zoom: 2, value: 1 }, 0.2],\r\n                            [{ zoom: 2, value: 2500 }, 5],\r\n                            [{ zoom: 4.5, value: 1 }, 2],\r\n                            [{ zoom: 4.5, value: 2500 }, 21],\r\n                            [{ zoom: 8, value: 1 }, 4],\r\n                            [{ zoom: 8, value: 2500 }, 32],\r\n                            [{ zoom: 12, value: 1 }, 6],\r\n                            [{ zoom: 12, value: 2500 }, 37],\r\n                            [{ zoom: 15, value: 1 }, 8],\r\n                            [{ zoom: 15, value: 2500 }, 42]\r\n                        ]\r\n                    },\r\n                    'circle-color': [\r\n                        'match',\r\n                        ['get', 'type'],\r\n                        \"Coal\", \"#ced1cc\",\r\n                        \"Storage\", \"#4e80e5\",\r\n                        \"Solar\", \"#ffc83e\",\r\n                        \"Nuclear\", \"#dd54b6\",\r\n                        \"Oil\", \"#a45edb\",\r\n                        \"Hydro\", \"#43cfef\",\r\n                        \"Wave & Tidal\", \"#43cfef\",\r\n                        \"Wind\", \"#00a98e\",\r\n                        \"Biomass\", \"#A7B734\",\r\n                        \"Waste\", \"#ea545c\",\r\n                        \"Gas\", \"#cc9b7a\",\r\n            /* other */ '#ccc'\r\n                    ],\r\n                    'circle-opacity': 0.77\r\n                },\r\n                'filter': ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType]\r\n            });\r\n        })\r\n    }\r\n\r\n    setFilterType(filtertype) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType = [\"all\", [\"==\", [\"get\", \"type\"], filtertype ]]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterYearStart(year) {\r\n        console.log(year)\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterYearEnd(year) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterStartEnd(year){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']],  year]\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], year]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterTypeString(arr){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType=arr\r\n            this.updateFilters()\r\n        }\r\n    }\r\n    \r\n    showAllTypes(){\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType=['!=', ['string', ['get','type']], 'placeholder'];\r\n            this.updateFilters()\r\n        }\r\n    }\r\n    updateFilters(){\r\n       // map.setFilter('powerplants', ['all', filterOperator, filterType, filterStartYear, filterEndYear, filterSite, filterCapacity]);\r\n        this.map.setFilter('powerplants', ['all', this.m_filterStartYear,this.m_filterEndYear, this.m_filterType])\r\n  \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport MapFunctions from './MapFunctions'\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    anchorname: this.props.anchorname,\r\n    paragraphs: []\r\n  };\r\n\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"filter\": this.props.paragraphs[i].props.actionFilter }\r\n      )\r\n\r\n     \r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={this.props.anchorname} className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n        </Observer>\r\n\r\n        <div id={this.props.anchorname + \"_id\"} className=\"panelcontent\">\r\n          {this.state.paragraphs.map(\r\n            (paragraph, i) =>\r\n              <StoryParagraph\r\n                key={this.state.anchorname + \"_id_p\" + i}\r\n                id={this.state.anchorname + \"_id_p\" + i}\r\n                paragraph={paragraph.text}\r\n                actionFilter={paragraph.filter}\r\n\r\n              />\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n  m_mapFunctions = null\r\n  m_firedAction = false\r\n  m_statusChanged= false\r\n  m_filterArray = [\"any\", []]\r\n  m_actionFilter = null\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n\r\n  handleScroll(event) {\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n      var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n      if(!this.m_firedAction){\r\n        if(this.state.highlighted){\r\n          if (this.props.actionFilter) { //if this has any actions supplied\r\n            if (this.m_mapFunctions === null) {\r\n              this.m_mapFunctions = new MapFunctions()\r\n            }\r\n            this.m_actionFilter.action(this.m_actionFilter.types,true)\r\n         //   this.m_mapFunctions.setFilterTypeString(this.m_filterArray)\r\n           //TODO HERE this.props.actionFilter.action\r\n          }\r\n          this.m_firedAction = true;\r\n        } else {\r\n          if (this.props.actionFilter) {\r\n            if (this.m_mapFunctions === null) {\r\n              this.m_mapFunctions = new MapFunctions()\r\n            }\r\n            this.m_actionFilter.action(null,true)\r\n           // this.m_mapFunctions.showAllTypes()\r\n            this.m_firedAction = true;\r\n          }\r\n        }\r\n      }\r\n      if ((topOffset > 150 && topOffset < 300) || (topOffset < 150 && topOffset > 0 && bottomOffset > 300)) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if(!this.state.highlighted){\r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n          this.m_firedAction = false\r\n        } \r\n         \r\n        \r\n      } else {\r\n \r\n        if(this.state.highlighted){\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    if (this.props.actionFilter) {\r\n      console.log(\"I got an actionFilter \" + this.props.actionFilter)\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      this.m_actionFilter = this.props.actionFilter\r\n     \r\n    }\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Observer\r\n        onChange={this.paragraphChange}\r\n      >\r\n        <p\r\n          className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n          id={this.props.id}>\r\n          {ReactHtmlParser(this.props.paragraph)}\r\n          {\" \" + this.props.actionFilter.types}\r\n        </p>\r\n      </Observer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport data2 from './ukdata/power_stations.json'\nimport MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\n\nclass ScrollyTeller extends Component {\n\n    componentDidUpdate(prevState) {\n        if (prevState.types !== this.state.types) {\n            var filter = [\"any\"]\n            for (var i = 0; i < this.state.types.length; i++) {\n                var type = this.state.types[i]\n                if (type.active) {\n                    filter.push([\"==\", [\"get\", \"type\"], type.type])\n                }\n            }\n\n            this.m_mapFunctions.setFilterTypeString(filter)\n\n        }\n    }\n    //  m_mapfilter = null;\n    state = {\n        sections: [],\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        panelHeight: 700,\n        types: [{ \"type\": \"Coal\", \"active\": true },\n        { \"type\": \"Gas\", \"active\": true },\n        { \"type\": \"Oil\", \"active\": true },\n        { \"type\": \"Nuclear\", \"active\": true },\n        { \"type\": \"Hydro\", \"active\": true },\n        { \"type\": \"Wind\", \"active\": true },\n        { \"type\": \"Waste\", \"active\": true },\n        { \"type\": \"Solar\", \"active\": true }]\n    }\n    panelChanged = false\n    m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n    componentDidMount = function () {\n\n        this.m_mapFunctions = new MapFunctions()\n        this.m_mapFunctions.init(data2, this.mapContainer)\n        this.setState({ alldata: data2 })\n\n        for (var i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year, sectiondata.sections[i].paragraphs)\n       //     console.log(sectiondata.sections[i].renderparagraphs)\n        }\n        //  console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n    }\n    allPanels = []\n    setActiveID = (id) => {\n        this.setState({\n            activeId: id\n        })\n        //this.m_mapFunctions.setFilterYearStart(this.state.years[id])\n        this.m_mapFunctions.setFilterStartEnd(this.state.sections[id].year)\n\n        //in each year i want to display plants that HAVE STARTED but NOT YET ENDED\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        var result = [];\n        var filter = \"\";\n        var key =\"\"\n        for (var i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (var j = 0; j < paragraphs[i].features.length; j++) {\n                    var feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    }\n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (j = 0; j < paragraphs[i].actions.length; j++) {\n                    var action = paragraphs[i].actions[j]\n                    if (action.highlight) {\n                        filter = {\n                            \"action\":this.setActiveMulti,\n                            \"types\": []\n                        }\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (var k = 0; k < action.highlight.keywords.length; k++) {\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k], \"<span class='\" + action.highlight.keywords[k] + \"'>\" + action.highlight.keywords[k] + \"</span>\")\n                            filter.types.push(this.cap(action.highlight.keywords[k]))\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    }\n                }\n            }\n\n            result.push(  \n                    <div  content={paragraphs[i]} id={key} actionFilter={filter}  />\n            )\n        }\n       // console.log(result)\n        return result\n\n    }\n\n    setActiveMulti=(types, active)=> {\n        console.log(types)\n        console.log(active)\n        var arr = null\n        if(types===null){\n             arr = [{ \"type\": \"Coal\", \"active\": true },\n             { \"type\": \"Gas\", \"active\": true },\n             { \"type\": \"Oil\", \"active\": true },\n             { \"type\": \"Nuclear\", \"active\": true },\n             { \"type\": \"Hydro\", \"active\": true },\n             { \"type\": \"Wind\", \"active\": true },\n             { \"type\": \"Waste\", \"active\": true },\n             { \"type\": \"Solar\", \"active\": true }]\n             \n        } else {\n            arr = [{ \"type\": \"Coal\", \"active\": false },\n             { \"type\": \"Gas\", \"active\": false },\n             { \"type\": \"Oil\", \"active\": false },\n             { \"type\": \"Nuclear\", \"active\": false },\n             { \"type\": \"Hydro\", \"active\": false },\n             { \"type\": \"Wind\", \"active\": false },\n             { \"type\": \"Waste\", \"active\": false },\n             { \"type\": \"Solar\", \"active\": false }]\n             for(var i = 0; i < arr.length; i++){\n                 for(var j = 0; j < types.length; j++){\n                    if(arr[i].type === types[j]){\n                        arr[i].active=true\n                        break;\n                    }\n                 }\n             }\n             \n        }\n        this.setState({\n            types: arr\n        })\n    }\n    \n    setActive=(ttype, active) =>{\n        //  console.log(index)\n        this.setState(state => {\n            const types = state.types.map((type, i) => {\n                if (type === ttype) {\n                    return { \"type\": type.type, \"active\": active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n\n    toggleActive=(ttype)=> {\n         console.log(ttype)\n        this.setState(state => {\n            const types = state.types.map((type) => {\n                if (type.type === ttype) {\n                    return { \"type\": type.type, \"active\": !type.active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"navbar\" id=\"yearNav\">\n                    {this.state.sections.map(\n                        (section, i) =>\n                            <NavMenuItem\n                                key={i}\n                                id={i}\n                                name={section.year}\n                                activeId={this.state.activeId}\n                            />\n                    )}\n                </div>\n                <div className=\"navbar\" id=\"typeNav\">\n                    {this.state.types.map(\n                        (type, i) =>\n                            <NavMenuTypeItem\n                                key={i}\n                                onClickA={this.toggleActive}\n                                type={type.type}\n                                active={type.active}\n                            />\n                    )}\n                </div>\n                <div className=\"MainContainer\">\n                    <div className=\"Panels\" /*style={{height: this.state.panelHeight}}*/>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n                              \n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.year}\n                                    anchorname={\"section\" + section.year}\n                                    paragraphs={section.renderparagraphs}\n                                />\n                            )}\n                    </div>\n                    <div /*style={{height: this.state.panelHeight}}*/ ref={el => this.mapContainer = el} className=\"mapContainer\" id=\"map\" />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass NavMenuTypeItem extends Component {\n    handleClick = () => {\n      this.props.onClickA(this.props.type);\n    }\n  \n    render() {\n      return (\n        <div onClick={this.handleClick} className={`navItem ${this.props.active ? \"navItemActive\" : \"\"}`}> {this.props.type} </div>\n        \n      );\n    }\n}\n\nconst NavMenuItem = ({ id, name, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#section${name}`}\n        alignToTop={true} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"}`}> {name} </div>\n    </ScrollIntoView>\n)\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}